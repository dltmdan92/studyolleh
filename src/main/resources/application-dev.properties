spring.jpa.hibernate.ddl-auto=update

# dev profile에서는 우리가 만든 postgres DB에 연결한다.
spring.datasource.url=jdbc:postgresql://192.168.99.100:5432/springdata
spring.datasource.username=seungmoo
spring.datasource.password=1568919am!

# 이렇게 설정을 추가 하면 spring-boot가 java mail sender Bean을 자동으로 추가해준다.

# spring.mail.protocol=smtp --> 이거 추가해주니까 정상적으로 돌아감
#spring.mail.protocol=smtp ㄴㄴ 이거 없어도 잘 됐음
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=dltmdan92@gmail.com
spring.mail.password=pxgkfebmszwtjnfd
spring.mail.properties.mail.smpt.auth=true
spring.mail.properties.mail.smpt.timeout=5000

# 여기서도 일단 로컬호스트로 해줬음 (개발환경은 dev.studyolleh.com 이런식으로)
app.host=http://localhost:8080

# 이미지 좀 더 큰거 쓰고 싶으면 이거 설정 (디폴트는 2MB)
server.tomcat.max-http-form-post-size=5MB

# thymeleaf가 기능 제공해준다.
# 사실상 form의 메서드는 POST이고, html에 name="_method" value="delete"로 넣어주고
# --> _method에 있는 value값(delete)로 RequestMapping을 해준다.
# HTML <FORM>에서 th:method에서 PUT 또는 DELETE를 사용해서 보내는 _method를 사용해서  @PutMapping과 @DeleteMapping으로 요청을 맵핑.
spring.mvc.hiddenmethod.filter.enabled=true